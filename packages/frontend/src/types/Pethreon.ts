/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export type PledgeStruct = {
  creatorAddress: string;
  contributorAddress: string;
  weiPerPeriod: BigNumberish;
  duration: BigNumberish;
  dateCreated: BigNumberish;
  periodExpires: BigNumberish;
  status: BigNumberish;
};

export type PledgeStructOutput = [
  string,
  string,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  number
] & {
  creatorAddress: string;
  contributorAddress: string;
  weiPerPeriod: BigNumber;
  duration: BigNumber;
  dateCreated: BigNumber;
  periodExpires: BigNumber;
  status: number;
};

export interface PethreonInterface extends utils.Interface {
  functions: {
    "cancelPledge(address)": FunctionFragment;
    "contributorWithdraw(uint256)": FunctionFragment;
    "createPledge(address,uint256,uint256)": FunctionFragment;
    "creatorWithdraw()": FunctionFragment;
    "currentPeriod()": FunctionFragment;
    "deposit()": FunctionFragment;
    "getContributorBalance()": FunctionFragment;
    "getContributorPledges()": FunctionFragment;
    "getCreatorBalance()": FunctionFragment;
    "getCreatorPledges()": FunctionFragment;
    "getExpiredPledges()": FunctionFragment;
    "startOfEpoch()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "cancelPledge",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "contributorWithdraw",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createPledge",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "creatorWithdraw",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "currentPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "deposit", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getContributorBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getContributorPledges",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCreatorBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCreatorPledges",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getExpiredPledges",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "startOfEpoch",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "cancelPledge",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "contributorWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createPledge",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "creatorWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getContributorBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getContributorPledges",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCreatorBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCreatorPledges",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getExpiredPledges",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "startOfEpoch",
    data: BytesLike
  ): Result;

  events: {
    "ContributorDeposited(uint256,address,uint256)": EventFragment;
    "ContributorWithdrew(uint256,address,uint256)": EventFragment;
    "CreatorWithdrew(uint256,address,uint256)": EventFragment;
    "PledgeCancelled(uint256,address,address)": EventFragment;
    "PledgeCreated(uint256,address,address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ContributorDeposited"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ContributorWithdrew"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CreatorWithdrew"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PledgeCancelled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PledgeCreated"): EventFragment;
}

export type ContributorDepositedEvent = TypedEvent<
  [BigNumber, string, BigNumber],
  { period: BigNumber; contributor: string; amount: BigNumber }
>;

export type ContributorDepositedEventFilter = TypedEventFilter<ContributorDepositedEvent>;

export type ContributorWithdrewEvent = TypedEvent<
  [BigNumber, string, BigNumber],
  { period: BigNumber; contributor: string; amount: BigNumber }
>;

export type ContributorWithdrewEventFilter = TypedEventFilter<ContributorWithdrewEvent>;

export type CreatorWithdrewEvent = TypedEvent<
  [BigNumber, string, BigNumber],
  { period: BigNumber; creatorAddress: string; amount: BigNumber }
>;

export type CreatorWithdrewEventFilter = TypedEventFilter<CreatorWithdrewEvent>;

export type PledgeCancelledEvent = TypedEvent<
  [BigNumber, string, string],
  { period: BigNumber; creatorAddress: string; contributor: string }
>;

export type PledgeCancelledEventFilter = TypedEventFilter<PledgeCancelledEvent>;

export type PledgeCreatedEvent = TypedEvent<
  [BigNumber, string, string, BigNumber, BigNumber],
  {
    period: BigNumber;
    creatorAddress: string;
    contributor: string;
    weiPerPeriod: BigNumber;
    periods: BigNumber;
  }
>;

export type PledgeCreatedEventFilter = TypedEventFilter<PledgeCreatedEvent>;

export interface Pethreon extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PethreonInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    cancelPledge(
      _creatorAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    contributorWithdraw(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createPledge(
      _creatorAddress: string,
      _weiPerPeriod: BigNumberish,
      _periods: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    creatorWithdraw(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    currentPeriod(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { periodNumber: BigNumber }>;

    deposit(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getContributorBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    getContributorPledges(
      overrides?: CallOverrides
    ): Promise<[PledgeStructOutput[]] & { allPledges: PledgeStructOutput[] }>;

    getCreatorBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    getCreatorPledges(
      overrides?: CallOverrides
    ): Promise<[PledgeStructOutput[]] & { allPledges: PledgeStructOutput[] }>;

    getExpiredPledges(
      overrides?: CallOverrides
    ): Promise<[PledgeStructOutput[]] & { allPledges: PledgeStructOutput[] }>;

    startOfEpoch(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  cancelPledge(
    _creatorAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  contributorWithdraw(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createPledge(
    _creatorAddress: string,
    _weiPerPeriod: BigNumberish,
    _periods: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  creatorWithdraw(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  currentPeriod(overrides?: CallOverrides): Promise<BigNumber>;

  deposit(
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getContributorBalance(overrides?: CallOverrides): Promise<BigNumber>;

  getContributorPledges(
    overrides?: CallOverrides
  ): Promise<PledgeStructOutput[]>;

  getCreatorBalance(overrides?: CallOverrides): Promise<BigNumber>;

  getCreatorPledges(overrides?: CallOverrides): Promise<PledgeStructOutput[]>;

  getExpiredPledges(overrides?: CallOverrides): Promise<PledgeStructOutput[]>;

  startOfEpoch(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    cancelPledge(
      _creatorAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    contributorWithdraw(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createPledge(
      _creatorAddress: string,
      _weiPerPeriod: BigNumberish,
      _periods: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    creatorWithdraw(overrides?: CallOverrides): Promise<BigNumber>;

    currentPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    deposit(overrides?: CallOverrides): Promise<BigNumber>;

    getContributorBalance(overrides?: CallOverrides): Promise<BigNumber>;

    getContributorPledges(
      overrides?: CallOverrides
    ): Promise<PledgeStructOutput[]>;

    getCreatorBalance(overrides?: CallOverrides): Promise<BigNumber>;

    getCreatorPledges(overrides?: CallOverrides): Promise<PledgeStructOutput[]>;

    getExpiredPledges(overrides?: CallOverrides): Promise<PledgeStructOutput[]>;

    startOfEpoch(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "ContributorDeposited(uint256,address,uint256)"(
      period?: null,
      contributor?: null,
      amount?: null
    ): ContributorDepositedEventFilter;
    ContributorDeposited(
      period?: null,
      contributor?: null,
      amount?: null
    ): ContributorDepositedEventFilter;

    "ContributorWithdrew(uint256,address,uint256)"(
      period?: null,
      contributor?: null,
      amount?: null
    ): ContributorWithdrewEventFilter;
    ContributorWithdrew(
      period?: null,
      contributor?: null,
      amount?: null
    ): ContributorWithdrewEventFilter;

    "CreatorWithdrew(uint256,address,uint256)"(
      period?: null,
      creatorAddress?: null,
      amount?: null
    ): CreatorWithdrewEventFilter;
    CreatorWithdrew(
      period?: null,
      creatorAddress?: null,
      amount?: null
    ): CreatorWithdrewEventFilter;

    "PledgeCancelled(uint256,address,address)"(
      period?: null,
      creatorAddress?: null,
      contributor?: null
    ): PledgeCancelledEventFilter;
    PledgeCancelled(
      period?: null,
      creatorAddress?: null,
      contributor?: null
    ): PledgeCancelledEventFilter;

    "PledgeCreated(uint256,address,address,uint256,uint256)"(
      period?: null,
      creatorAddress?: null,
      contributor?: null,
      weiPerPeriod?: null,
      periods?: null
    ): PledgeCreatedEventFilter;
    PledgeCreated(
      period?: null,
      creatorAddress?: null,
      contributor?: null,
      weiPerPeriod?: null,
      periods?: null
    ): PledgeCreatedEventFilter;
  };

  estimateGas: {
    cancelPledge(
      _creatorAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    contributorWithdraw(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createPledge(
      _creatorAddress: string,
      _weiPerPeriod: BigNumberish,
      _periods: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    creatorWithdraw(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    currentPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    deposit(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getContributorBalance(overrides?: CallOverrides): Promise<BigNumber>;

    getContributorPledges(overrides?: CallOverrides): Promise<BigNumber>;

    getCreatorBalance(overrides?: CallOverrides): Promise<BigNumber>;

    getCreatorPledges(overrides?: CallOverrides): Promise<BigNumber>;

    getExpiredPledges(overrides?: CallOverrides): Promise<BigNumber>;

    startOfEpoch(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    cancelPledge(
      _creatorAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    contributorWithdraw(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createPledge(
      _creatorAddress: string,
      _weiPerPeriod: BigNumberish,
      _periods: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    creatorWithdraw(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    currentPeriod(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deposit(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getContributorBalance(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getContributorPledges(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCreatorBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getCreatorPledges(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getExpiredPledges(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    startOfEpoch(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
